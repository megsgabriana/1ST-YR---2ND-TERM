#include <iostream>
using namespace std;

//declaration of variables
struct info //information of each players
{
	char nickname[20];
	int age;
	int score1, score2;
	double average;
	double maxAve;
	double minAve;
	
}player[5]; //the number or population of players

void addRecord();
void viewRecord();
void playerAve();
void maxAve();
void minAve();

int main(){
	int choice;
	char teleport;
	
	while(1){
	main:
	cout << " ---------------------------------------------\n";
	cout << "                     MAIN MENU                \n";
	cout << " ---------------------------------------------\n";
	cout << " [1] Add Record\n";
	cout << " [2] View Player's Record\n";
	cout << " [3] Computer for Average\n";
	cout << " [4] The player/s who got the maximum average\n";
	cout << " [5] The player/s who got the minimum average\n";
	cout << " ---------------------------------------------\n";
	
	cout << " Choose the number to be executed: ";
	cin >> choice;
	
	//the cases of each choices in the main menu
	switch (choice)
	{
		case 1:
			system("cls");
			addRecord();
			break;
		case 2:
			system ("cls");
			viewRecord();
			break;
		case 3:
			system ("cls");
			playerAve();
			break;
		case 4:
			maxAve();
			break;
		case 5:
			minAve();
			break;
		default:
			cout << "\nInvalid Input! Press enter to choose again.";
			main();
			break;
	}
	
	cout << "\n Do you want to go back to the menu? (y/n): ";
	cin >> teleport;
	
	if (teleport == 'y' || teleport == 'Y') {
	system ("cls");
	main(); }
	
	else if (teleport == 'n' || teleport == 'N') {
	cout << " Are you sure you want to exit? (y/n): ";
	cin >> teleport;
	    if (teleport == 'y' || teleport == 'Y')
		exit(1);
		
		else if (teleport == 'n' ||  teleport == 'N') {
		    cout << " \nDo you want to go back to the menu? (y/n): ";
			cin >> teleport;
			    if (teleport == 'y' || teleport == 'Y') {
				system("cls");
				main(); }
				
				if (teleport == 'n' || teleport == 'N')
				exit (1); 
			}
		}
	else 
	cout << " Invalid Input! Going back to main menu...";
	main();
	exit(1);
	}
	return 0;
}

//START OF USING VOID TO STORE THE DATA OF EACH OF THE CHOICES
//Add a New Record
void addRecord()
{	
cout << "\n [1] ADD NEW RECORD\n";
cout << " ---------------------\n";
	for (int i = 0; i < 5; i++)
	{
		cout << "\n Player " << i+1 << endl;
		cout << " Enter Nickname: ";
		cin >> player[i].nickname;
		cout << " Enter Age: ";
		cin >> player[i].age;
		cout << "\n Two (2) Best Scores: " << endl;
		cout << " Score #1: ";
		cin >> player[i].score1;
		cout << " Score #2: ";
		cin >> player[i].score2; 
		cout << "\n---------------------" << endl;
	}
}

//View Players' Record
void viewRecord()
{
	cout << " PLAYERS' RECORD" << endl;
	cout << " ---------------\n";
	
	for (int i = 0; i < 5; i++)
	{
		cout << "\n Player " << i+1 << endl;
		cout << " Nickname: " << player[i].nickname << endl;
		cout << " Age: " << player[i].age;
		cout << "\n Two (2) Best Scores: " << endl;
		cout << " Score #1: " << player[i].score1 << endl;
		cout << " Score #2: " << player[i].score2 << endl;
		cout << "\n--------------------";
	}
}

//Total Average of each Players
void playerAve()
{
	cout << "\n PLAYER'S AVERAGE" << endl;
	cout << " ----------------\n";

	cout << "\n -----------------------------";
	for (int i = 0; i < 5; i++)
	{
		cout << "\n Player " << player[i].nickname << endl; 
		cout << " Two (2) Best Scores: " << player[i].score1 << " and " << player[i].score2 << endl;
		
		player[i].average = (player[i].score1 + player[i].score2)/2; //gumamit ka lang ng function sa struct para magconnect connect lahat, which is yung player[i].average
		cout << "\n (" << player[i].score1 << " + " << player[i].score2 << ")" << "/2 = " << player[i].average << endl;
		cout << " Average: " << player[i].average << endl;
		cout << " \n-----------------------------\n";
	}
}

//In finding the player who got the maximum average overall out of the other 4 players.
void maxAve()
{
	cout << "\n ---------------------------\n";
	int i, counter = 0; //counter is used bilang pambilang ng kung sinong player na ang currently ginagamit sa isang ikot
	
	double maxAve;
	maxAve = player[0].average;

	for (i = 1; i < 5; i++) //nagstart sa i = 1; kasi yung maxAve is assumed and initialized as player[0].average na agad, so dun na agad icocompare yung player[i].average 
	{
		if (player[i].average > maxAve) //dito oh. continuation ng comment sa taas
		{
			maxAve = player[i].average; //so here, matatransfer yung value if yung current player[i].average eh mas malaki dun sa pang una which is si player[0].average
		}
	} 
	for (i = 0; i < 5; i++) //nagfor loop uli para if may katulad na number yung maxAverage, dalawa or more yung mag appear.
	{
		if (player[i].average == maxAve)
		{
		cout << " Player " << player[counter].nickname << " has the maximum average. " << endl; 
		}
		counter++;
	}
}

void minAve() //same as maxAve lang to, pinagkaiba lang yung sign of comparison, which is magiging less than (<) instead na greater than (>)
{
	cout << "\n ---------------------------\n";
	int i, counter = 0; //counter is used bilang pambilang ng kung sinong player na ang currently ginagamit/tinetest sa isang ikot
	
	double minAve;
	minAve = player[0].average;

	for (i = 1; i < 5; i++)
	{
		if (player[i].average < minAve)
		{
			minAve = player[i].average;
		}
	} 
	for (i = 0; i < 5; i++)
	{
		if (player[i].average == minAve)
		{
		cout << " Player " << player[counter].nickname << " has the minimum average. " << endl; 
		}
		counter++;
	}
}
